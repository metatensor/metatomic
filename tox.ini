[tox]
min_version = 4.9.0
# these are the default environments, i.e. the list of tests running when you
# execute `tox` in the command-line without anything else
envlist =
    lint
    core-tests
    operations-numpy-tests
    operations-torch-tests
    learn-numpy-tests
    learn-torch-tests
    torch-tests
    docs-tests


[testenv]
passenv = *
package = external
package_env = build-metatensor-core
lint_folders = "{toxinidir}/python" "{toxinidir}/setup.py"
build_single_wheel = --no-deps --no-build-isolation --check-build-dependencies
test_options = --cov={env_site_packages_dir}/metatensor --cov-append --cov-report= --import-mode=append -W error


[testenv:build-metatensor-core]
description =
    Used to only build the wheels which are then re-used by all other environments
    requiring metatensor to be installed
passenv = *
deps =
    cmake <3.28
    setuptools
    packaging
    wheel

commands =
    pip wheel python/metatensor-core {[testenv]build_single_wheel} --wheel-dir {envtmpdir}/dist


[testenv:core-tests]
description = Run the tests of the metatensor-core Python package
deps =
    numpy
    pytest
    pytest-cov
    torch

changedir = python/metatensor-core
commands =
    pytest {[testenv]test_options} {posargs}

[testenv:operations-numpy-tests]
description =
    Run the tests of the metatensor-operations Python package using numpy arrays
deps =
    packaging
    numpy
    pytest
    pytest-cov

changedir = python/metatensor-operations
commands =
    # metatensor-core is installed by tox
    # install metatensor
    pip install ../.. {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-operations
    pip install . {[testenv]build_single_wheel} --force-reinstall

    # run the unit tests
    pytest {[testenv]test_options} {posargs}

[testenv:operations-torch-tests]
description =
    Run the tests of the metatensor-operations Python package using torch arrays
deps =
    torch
    {[testenv:operations-numpy-tests]deps}
changedir =
    {[testenv:operations-numpy-tests]changedir}
commands =
    {[testenv:operations-numpy-tests]commands}


[testenv:learn-numpy-tests]
description =
    Run the tests of the metatensor-learn Python package using numpy arrays
deps =
    packaging
    numpy
    pytest
    pytest-cov

changedir = python/metatensor-learn
commands =
    # metatensor-core is installed by tox
    # install metatensor-operations
    pip install ../metatensor-operations {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-learn
    pip install . {[testenv]build_single_wheel} --force-reinstall

    # run the unit tests
    pytest {[testenv]test_options} {posargs}

[testenv:learn-torch-tests]
description =
    Run the tests of the metatensor-learn Python package using torch arrays
deps =
    torch
    cmake <3.28
    {[testenv:learn-numpy-tests]deps}
changedir =
    {[testenv:learn-numpy-tests]changedir}
commands =
    pip install ../metatensor-torch {[testenv]build_single_wheel} --force-reinstall
    {[testenv:learn-numpy-tests]commands}

[testenv:torch-tests]
description = Run the tests of the metatensor-torch Python package
deps =
    cmake <3.28
    numpy
    packaging
    pytest
    pytest-cov
    torch
    ase

changedir = python/metatensor-torch
commands =
    # install metatensor-torch
    pip install . {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-operations
    pip install ../metatensor-operations {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-learn
    pip install ../metatensor-learn {[testenv]build_single_wheel} --force-reinstall

    # Make torch.autograd.gradcheck work with pytest
    python {toxinidir}/scripts/pytest-dont-rewrite-torch.py

    # run the unit tests
    pytest {[testenv]test_options} {posargs}


[testenv:docs-tests]
description = Run the doctests defined in any metatensor package
deps =
    pytest
    numpy
    torch
    ase
    cmake <3.28

setenv =
    # ignore the fact that metatensor.torch.operations was loaded from a file
    # not in `metatensor/torch/operations`
    PY_IGNORE_IMPORTMISMATCH = 1

commands =
    # metatensor-core is installed by tox
    # install metatensor
    pip install . {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-operations
    pip install python/metatensor-operations {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-learn
    pip install python/metatensor-learn {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-torch
    pip install python/metatensor-torch {[testenv]build_single_wheel} --force-reinstall

    # run documentation tests
    pytest --doctest-modules --pyargs metatensor -W error


[testenv:lint]
description =
    lint the Python code with flake8 (code linter), black (code formatter), and
    isort (sorting of imports)
package = skip
deps =
    flake8
    flake8-bugbear
    black
    blackdoc
    isort

commands =
    flake8 {[testenv]lint_folders}
    black --check --diff {[testenv]lint_folders}
    blackdoc --check --diff {[testenv]lint_folders}
    isort --check-only --diff {[testenv]lint_folders}

[testenv:format]
description = Abuse tox to do actual formatting on all files.
package = skip
deps =
    black
    blackdoc
    isort
commands =
    black {[testenv]lint_folders}
    blackdoc {[testenv]lint_folders}
    isort {[testenv]lint_folders}

[testenv:docs]
description = build the documentation with sphinx
deps =
    -r docs/requirements.txt
    cmake <3.28

allowlist_externals = bash
commands =
    # metatensor-core is installed by tox
    # install metatensor
    pip install . {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-operations
    pip install python/metatensor-operations {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-torch
    pip install python/metatensor-torch {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-learn
    pip install python/metatensor-learn {[testenv]build_single_wheel} --force-reinstall

    sphinx-build -d docs/build/doctrees -W -b html docs/src docs/build/html

    bash -c "cargo rustdoc --package metatensor -- --html-before-content docs/src/core/reference/rust/backlink.html"
    bash -c "rm -rf docs/build/html/core/reference/rust/"
    bash -c "cp -r target/doc/ docs/build/html/core/reference/rust/"
    bash -c "cp docs/src/core/reference/rust/index.html docs/build/html/core/reference/rust/"


[testenv:build-tests]
description = Asserts Pythons package build integrity so one can build sdist and wheels
package = skip
deps =
    build
    twine  # a tool to check sdist and wheels metadata
    pip2pi # tool to create PyPI-like package indexes

allowlist_externals = bash
commands =
    python --version  # print the version of python used in this test

    bash ./scripts/build-all-wheels.sh {envtmpdir}

    twine check {envtmpdir}/dist/*.tar.gz
    twine check {envtmpdir}/dist/*.whl

    # check building wheels directly from the a checkout
    python -m build python/metatensor-core --wheel --outdir {envtmpdir}/dist
    python -m build python/metatensor-operations --wheel --outdir {envtmpdir}/dist
    python -m build python/metatensor-learn --wheel --outdir {envtmpdir}/dist
    python -m build python/metatensor-torch --wheel --outdir {envtmpdir}/dist
    python -m build .  --wheel --outdir {envtmpdir}/dist


[flake8]
max_line_length = 88
extend-ignore = E203

[coverage:report]
skip_covered = True
show_missing = True
omit =
    tests/.*
    **/documentation.py

[coverage:paths]
core =
    python/metatensor-core/metatensor
    .tox/*/lib/python*/site-packages/metatensor

operations =
    python/metatensor-operations/metatensor/operations
    .tox/*/lib/python*/site-packages/metatensor/operations

torch =
    python/metatensor-torch/metatensor/torch
    .tox/*/lib/python*/site-packages/metatensor/torch
