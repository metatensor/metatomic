[tox]
min_version = 4.0
# these are the default environments, i.e. the list of tests running when you
# execute `tox` in the command-line without anything else
envlist =
    core-tests
    operations-notorch-tests
    operations-torch-tests
    torch-tests
    docs-tests
    lint


[testenv]
passenv = *
package = external
package_env = build-metatensor-core
lint_folders = "{toxinidir}/python" "{toxinidir}/setup.py"
build_single_wheel = --no-deps --no-build-isolation --check-build-dependencies

commands =
    # error if the user gives a wrong testenv name in `tox -e`
    python -c "import sys; print('environement {env_name} does not exist'); sys.exit(1)"


[testenv:build-metatensor-core]
# This environment is only used to build the wheels which are then re-used by
# all other environments requiring metatensor to be installed
passenv = *
deps =
    setuptools
    packaging
    wheel
    cmake

commands =
    pip wheel python/metatensor-core {[testenv]build_single_wheel} --wheel-dir {envtmpdir}/dist


[testenv:core-tests]
# this environement runs the tests of the metatensor-core Python package
deps =
    pytest
    numpy
    torch

changedir = python/metatensor-core
commands =
    pytest --import-mode=append {posargs}

[testenv:operations-notorch-tests]
# this environement runs the tests of the metatensor-operations Python package
# without torch functionalities
deps =
    packaging
    pytest
    numpy

changedir = python/metatensor-operations
commands =
    # metatensor-core is installed by tox
    # install metatensor
    pip install ../.. {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-operations
    pip install . {[testenv]build_single_wheel} --force-reinstall

    # run the unit tests
    pytest --import-mode=append {posargs}

[testenv:operations-torch-tests]
# this environement runs the tests of the metatensor-operations Python package
# with torch functionalities
deps =
    torch
    {[testenv:operations-notorch-tests]deps}

commands =
    {[testenv:operations-notorch-tests]commands}

changedir =
    {[testenv:operations-notorch-tests]changedir}

[testenv:torch-tests]
# this environement runs the tests of the metatensor-torch Python package
deps =
    packaging
    pytest
    numpy
    torch

    cmake

changedir = python/metatensor-torch
commands =
    # install metatensor-torch
    pip install . {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-operations
    pip install ../metatensor-operations {[testenv]build_single_wheel} --force-reinstall

    # run the unit tests
    pytest --import-mode=append {posargs}


[testenv:docs-tests]
# this environement runs the doctests defined in any metatensor package
deps =
    pytest
    numpy
    torch

    cmake

setenv =
    # ignore the fact that metatensor.torch.operations was loaded from a file
    # not in `metatensor/torch/operations`
    PY_IGNORE_IMPORTMISMATCH = 1

commands =
    # metatensor-core is installed by tox
    # install metatensor
    pip install . {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-operations
    pip install python/metatensor-operations {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-torch
    pip install python/metatensor-torch {[testenv]build_single_wheel} --force-reinstall

    # run documentation tests
    pytest --doctest-modules --pyargs metatensor


[testenv:lint]
# this environement lints the Python code with flake8 (code linter), black (code
# formatter), and isort (sorting of imports)
package = skip
deps =
    flake8
    flake8-bugbear
    black
    blackdoc
    isort

commands =
    flake8 {[testenv]lint_folders}
    black --check --diff {[testenv]lint_folders}
    blackdoc --check --diff {[testenv]lint_folders}
    isort --check-only --diff {[testenv]lint_folders}

[testenv:format]
# this environement abuses tox to do actual formatting
#
# Users can run `tox -e format` to run formatting on all files
package = skip
deps =
    black
    blackdoc
    isort
commands =
    black {[testenv]lint_folders}
    blackdoc {[testenv]lint_folders}
    isort {[testenv]lint_folders}

[testenv:docs]
# this environement builds the documentation with sphinx
deps =
    -r docs/requirements.txt
    cmake

allowlist_externals = bash
commands =
    # metatensor-core is installed by tox
    # install metatensor
    pip install . {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-operations
    pip install python/metatensor-operations {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-torch
    pip install python/metatensor-torch {[testenv]build_single_wheel} --force-reinstall

    sphinx-build {posargs:-E} -W -b html docs/src docs/build/html

    bash -c "cargo doc --no-deps --package metatensor"
    bash -c "rm -rf docs/build/html/reference/rust/"
    bash -c "cp -r target/doc/ docs/build/html/reference/rust/"
    bash -c "cp docs/src/reference/rust/index.html docs/build/html/reference/rust/"


[testenv:build-tests]
# this environement makes sure one can build sdist and wheels for Python
package = skip
deps =
    build
    twine  # a tool to check sdist and wheels metadata

allowlist_externals = bash
commands =
    python --version  # print the version of python used in this test

    bash ./scripts/package-core.sh
    bash ./scripts/package-torch.sh

    bash -c "rm -rf {envtmpdir}/dist"

    # check building sdist from a checkout, and wheel from the sdist
    python -m build python/metatensor-core --outdir {envtmpdir}/dist
    python -m build python/metatensor-operations --outdir {envtmpdir}/dist
    python -m build . --outdir {envtmpdir}/dist

    # for metatensor-torch, we can not build from a sdist until metatensor-core
    # is available on PyPI, so we build both sdist and wheel from a checkout
    python -m build python/metatensor-torch --sdist --outdir {envtmpdir}/dist
    python -m build python/metatensor-torch --wheel --outdir {envtmpdir}/dist

    twine check {envtmpdir}/dist/*.tar.gz
    twine check {envtmpdir}/dist/*.whl

    # check building wheels directly from the a checkout
    python -m build python/metatensor-core --wheel --outdir {envtmpdir}/dist
    python -m build python/metatensor-operations --wheel --outdir {envtmpdir}/dist
    python -m build .  --wheel --outdir {envtmpdir}/dist


[flake8]
max_line_length = 88
extend-ignore = E203
