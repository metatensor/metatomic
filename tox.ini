[tox]
min_version = 4.0
# these are the default environments, i.e. the list of tests running when you
# execute `tox` in the command-line without anything else
envlist =
    core-tests
    operations-tests
    torch-tests
    docs-tests
    lint


[testenv]
passenv = *
package = external
package_env = build-equistore-core
lint_folders = "{toxinidir}/python" "{toxinidir}/setup.py"
build_single_wheel = --no-deps --no-build-isolation --check-build-dependencies

commands =
    # error if the user gives a wrong testenv name in `tox -e`
    python -c "import sys; print('environement {env_name} does not exist'); sys.exit(1)"


[testenv:build-equistore-core]
# This environment is only used to build the wheels which are then re-used by
# all other environments requiring equistore to be installed
passenv = *
deps =
    setuptools
    wheel
    cmake

commands =
    pip wheel python/equistore-core {[testenv]build_single_wheel} --wheel-dir {envtmpdir}/dist


[testenv:core-tests]
# this environement runs the tests of the equistore-core Python package
deps =
    pytest
    numpy
    torch

changedir = python/equistore-core
commands =
    pytest --import-mode=append {posargs}


[testenv:operations-tests]
# this environement runs the tests of the equistore-operations Python package
deps =
    pytest
    numpy
    torch

changedir = python/equistore-operations
commands =
    # equistore-core is installed by tox
    # install equistore
    pip install ../.. {[testenv]build_single_wheel} --force-reinstall
    # install equistore-operations
    pip install . {[testenv]build_single_wheel} --force-reinstall

    # run the unit tests
    pytest --import-mode=append {posargs}


[testenv:torch-tests]
# this environement runs the tests of the equistore-torch Python package
deps =
    pytest
    numpy
    torch

    cmake

changedir = python/equistore-torch
commands =
    # install equistore-torch
    pip install . {[testenv]build_single_wheel} --force-reinstall
    # run the unit tests
    pytest --import-mode=append {posargs}


[testenv:docs-tests]
# this environement runs the doctests defined in any equistore package
deps =
    pytest
    numpy
    torch

    cmake

commands =
    # equistore-core is installed by tox
    # install equistore
    pip install . {[testenv]build_single_wheel} --force-reinstall
    # install equistore-operations
    pip install python/equistore-operations {[testenv]build_single_wheel} --force-reinstall
    # install equistore-torch
    pip install python/equistore-torch {[testenv]build_single_wheel} --force-reinstall

    # run documentation tests
    pytest --doctest-modules --pyargs equistore


[testenv:lint]
# this environement lints the Python code with flake8 (code linter), black (code
# formatter), and isort (sorting of imports)
package = skip
deps =
    flake8
    flake8-bugbear
    black
    blackdoc
    isort

commands =
    flake8 {[testenv]lint_folders}
    black --check --diff {[testenv]lint_folders}
    blackdoc --check --diff {[testenv]lint_folders}
    isort --check-only --diff {[testenv]lint_folders}

[testenv:format]
# this environement abuses tox to do actual formatting
#
# Users can run `tox -e format` to run formatting on all files
package = skip
deps =
    black
    blackdoc
    isort
commands =
    black {[testenv]lint_folders}
    blackdoc {[testenv]lint_folders}
    isort {[testenv]lint_folders}

[testenv:docs]
# this environement builds the documentation with sphinx
deps =
    -r docs/requirements.txt
    cmake

allowlist_externals = bash
commands =
    # equistore-core is installed by tox
    # install equistore
    pip install . {[testenv]build_single_wheel} --force-reinstall
    # install equistore-operations
    pip install python/equistore-operations {[testenv]build_single_wheel} --force-reinstall
    # install equistore-torch
    pip install python/equistore-torch {[testenv]build_single_wheel} --force-reinstall

    sphinx-build {posargs:-E} -W -b html docs/src docs/build/html

    bash -c "cargo doc --no-deps --package equistore"
    bash -c "rm -rf docs/build/html/reference/rust/"
    bash -c "cp -r target/doc/ docs/build/html/reference/rust/"
    bash -c "cp docs/src/reference/rust/index.html docs/build/html/reference/rust/"


[testenv:build-tests]
# this environement makes sure one can build sdist and wheels for Python
package = skip
deps =
    build
    twine  # a tool to check sdist and wheels metadata

allowlist_externals = bash
commands =
    python --version  # print the version of python used in this test

    bash ./scripts/package-core.sh
    bash ./scripts/package-torch.sh

    bash -c "rm -rf {envtmpdir}/dist"

    # check building sdist from a checkout, and wheel from the sdist
    python -m build python/equistore-core --outdir {envtmpdir}/dist
    python -m build python/equistore-operations --outdir {envtmpdir}/dist
    python -m build . --outdir {envtmpdir}/dist

    # for equistore-torch, we can not build from a sdist until equistore-core
    # is available on PyPI, so we build both sdist and wheel from a checkout
    python -m build python/equistore-torch --sdist --outdir {envtmpdir}/dist
    python -m build python/equistore-torch --wheel --outdir {envtmpdir}/dist

    twine check {envtmpdir}/dist/*.tar.gz
    twine check {envtmpdir}/dist/*.whl

    # check building wheels directly from the a checkout
    python -m build python/equistore-core --wheel --outdir {envtmpdir}/dist
    python -m build python/equistore-operations --wheel --outdir {envtmpdir}/dist
    python -m build .  --wheel --outdir {envtmpdir}/dist


[flake8]
max_line_length = 88
extend-ignore = E203
