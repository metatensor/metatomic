name: Documentation

on:
  push:
    branches: [master]
    tags: ["*"]
  pull_request:
    # Check all PR

jobs:
  build-and-publish:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: setup rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - name: setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: install dependencies
        run: |
          python -m pip install tox
          sudo apt install doxygen
      - name: build documentation
        run: tox -e docs

      - name: put documentation in the website
        run: |
          git clone https://github.com/$GITHUB_REPOSITORY --branch gh-pages gh-pages
          rm -rf gh-pages/.git
          cd gh-pages

          REF_KIND=$(echo $GITHUB_REF | cut -d / -f2)
          if [[ "$REF_KIND" == "tags" ]]; then
              TAG=${GITHUB_REF#refs/tags/}
              mv ../docs/build/html $TAG
          else
              rm -rf latest
              mv ../docs/build/html latest
          fi

      - name: deploy to gh-pages
        if: github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages/
          force_orphan: true

      - name: post link to RTD
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v5
        with:
          script: |
            async function insertUpdateComment(owner, repo, issue_number, purpose, body) {
                const {data: comments} = await github.rest.issues.listComments(
                    {owner, repo, issue_number}
                );
                const marker = `<!-- bot: ${purpose} -->`;
                body = marker + "\n" + body;
                const existing = comments.filter((c) => c.body.includes(marker));
                if (existing.length > 0) {
                    const last = existing[existing.length - 1];
                    core.info(`Updating comment ${last.id}`);
                    await github.rest.issues.updateComment({
                        owner, repo,
                        body,
                        comment_id: last.id,
                    });
                } else {
                    core.info(`Creating a comment in issue / PR #${issue_number}`);
                    await github.rest.issues.createComment({issue_number, body, owner, repo});
                }
            }

            const {owner, repo} = context.repo;
            const pr = ${{ toJSON(github.event.pull_request) }};

            let body = 'The documentation for this pull request is (or will soon be) available on readthedocs: ';
            body += `https://equistore--${pr.number}.org.readthedocs.build/en/${pr.number}/`;
            core.info("Review thread message body:", body);

            await insertUpdateComment(owner, repo, pr.number, "link-to-PR-docs", body);
