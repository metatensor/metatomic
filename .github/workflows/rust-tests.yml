name: Rust tests

on:
  push:
    branches: [master]
  pull_request:
    # Check all PR

jobs:
  rust-tests:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} / Rust ${{ matrix.rust-version }}${{ matrix.extra-name }}
    container: ${{ matrix.container }}
    strategy:
      matrix:
        include:
          # test without any feature (i.e shared build)
          - os: ubuntu-20.04
            rust-version: stable
            rust-target: x86_64-unknown-linux-gnu
            extra-name: ", no features"

          # test with all features (i.e static build + ndarray)
          - os: ubuntu-20.04
            rust-version: stable
            rust-target: x86_64-unknown-linux-gnu
            cargo-build-flags: --release --all-features
            do-valgrind: true
            extra-name: ", all features, release"

          # MSRV (Minimally Supported Rust Version)
          - os: ubuntu-20.04
            rust-version: 1.61
            rust-target: x86_64-unknown-linux-gnu
            cargo-build-flags: --features=rayon

          # check the build on a stock Ubuntu 18.04, including cmake 3.10
          - os: ubuntu-20.04
            rust-version: from Ubuntu
            container: ubuntu:18.04
            rust-target: x86_64-unknown-linux-gnu
            cargo-build-flags: --all-features
            extra-name: ", all features"

          - os: macos-11
            rust-version: stable
            rust-target: x86_64-apple-darwin
            cargo-build-flags: --all-features
            extra-name: ", all features"
    steps:
      - name: install dependencies in container
        if: matrix.container == 'ubuntu:18.04'
        run: |
          apt update
          apt install -y software-properties-common
          add-apt-repository -y ppa:git-core/ppa
          add-apt-repository ppa:deadsnakes/ppa
          apt install -y cmake make gcc g++ git curl rustc cargo
          apt install -y python3.7 python3-pip
          ln -s /usr/bin/python3.7 /usr/bin/python

      - uses: actions/checkout@v3

      - name: setup rust
        uses: dtolnay/rust-toolchain@master
        if: "!matrix.container"
        with:
          toolchain: ${{ matrix.rust-version }}
          target: ${{ matrix.rust-target }}

      - name: install valgrind
        if: matrix.do-valgrind
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind

      - name: run tests
        run: cargo test --package equistore --package equistore-core --target ${{ matrix.rust-target }} ${{ matrix.cargo-build-flags }}


  # check that the C API declarations are correctly used by Rust and Python
  prevent-bitrot:
    runs-on: ubuntu-20.04
    name: check C API declarations
    steps:
      - uses: actions/checkout@v3

      - name: set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: setup rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu

      - name: install python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pycparser

      - name: check that Rust/Python C API declarations are up to date
        run: |
          # bindgen is already installed on GitHub Actions VM
          ./scripts/update-declarations.sh
          git diff --exit-code
