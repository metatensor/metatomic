name: Test

on:
  push:
    branches: [master]
  pull_request:
    # Check all PR

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} / rust ${{ matrix.rust-version }} / ${{ matrix.build-type }} ${{ matrix.extra-name }}
    container: ${{ matrix.container }}
    strategy:
      matrix:
        include:
          # test without any feature
          - os: ubuntu-20.04
            rust-version: stable
            rust-target: x86_64-unknown-linux-gnu
            build-type: debug

          - os: ubuntu-20.04
            rust-version: stable
            rust-target: x86_64-unknown-linux-gnu
            build-type: release
            cargo-build-flags: --release --all-features

          # MSRV (Minimally Supported Rust Version)
          - os: ubuntu-20.04
            rust-version: 1.61
            rust-target: x86_64-unknown-linux-gnu
            build-type: debug
            cargo-build-flags: --all-features

          # check the build on a stock Ubuntu 18.04, including cmake 3.10
          - os: ubuntu-20.04
            rust-version: from Ubuntu
            container: ubuntu:18.04
            rust-target: x86_64-unknown-linux-gnu
            build-type: debug
            cargo-build-flags: --all-features

          - os: macos-11
            rust-version: stable
            rust-target: x86_64-apple-darwin
            build-type: debug
            cargo-build-flags: --all-features
    steps:
      - name: install dependencies in container
        if: matrix.container == 'ubuntu:18.04'
        run: |
          apt update
          apt install -y software-properties-common
          add-apt-repository -y ppa:git-core/ppa
          add-apt-repository ppa:deadsnakes/ppa
          apt install -y cmake make gcc g++ git curl rustc cargo
          apt install -y python3.7 python3-pip
          ln -s /usr/bin/python3.7 /usr/bin/python

      - uses: actions/checkout@v3

      - name: setup Python
        uses: actions/setup-python@v4
        if: "!matrix.container"
        with:
          python-version: "3.10"

      - name: setup rust
        uses: actions-rs/toolchain@v1
        if: "!matrix.container"
        with:
          profile: minimal
          toolchain: ${{ matrix.rust-version }}
          default: true
          target: ${{ matrix.rust-target }}

      - name: install tests dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox black flake8

      - name: run tests
        run: cargo test --target ${{ matrix.rust-target }} ${{ matrix.cargo-build-flags }}

  # second set of jobs checking that (non-test) code still compiles/run as expected
  prevent-bitrot:
    runs-on: ubuntu-20.04
    name: check examples / benchmarks / Python build
    strategy:
      matrix:
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10', '3.11']
        include:
          - rust-version: stable
            rust-target: x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3

      - name: set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: setup rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust-version }}
          default: true
          target: ${{ matrix.rust-target }}

      - name: install python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox

      - name: python build tests
        run: tox -e build-python
