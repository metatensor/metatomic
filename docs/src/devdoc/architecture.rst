.. _devdoc-architecture:

Code organization
=================

The code is organized in multiple modules, each in a separate directory:

- ``metatensor-core/`` contains the core library, implemented in Rust and exposed
  to the outside world through a C API. This is also where the C++ API lives,
  implemented as a header-only library in ``metatensor.hpp``.
- ``metatensor/`` contains the Rust interface to metatensor, using the C API
  defined in ``metatensor-core``, as well as the corresponding tests and examples
- ``python/metatensor-core`` contains the Python interface to the core metatensor
  types, and the corresponding tests;
- ``python/metatensor-operations`` contains a set of pure Python functions to
  manipulate data in metatensor format, and the corresponding tests;
- ``python/metatensor`` contains a small Python package re-exporting everything
  from ``metatensor-core`` and ``metatensor-operations``. This is the main package
  users should interact with.

Finally, ``docs/`` contains the documentation for everything related to
metatensor.

------------------------

.. figure:: ../../static/images/API-organization.*
    :width: 600px
    :align: center

    Logical organization of the modules in the metatensor repository. Blue boxes
    are packages that users should interact with, and purple boxes are artifacts
    used by the different languages. Arrows indicate dependencies and data flow
    from one module to another.


``metatensor-core``
^^^^^^^^^^^^^^^^^^^

This sub-project is supposed to be built by `cmake`_. When building it,
``libmetatensor.so`` (``libmetatensor.dylib`` on macOS/``metatensor.dll`` on
Windows) and ``metatensor.h`` will be produced for consumption by other
modules/the end users.

``metatensor.h`` is automatically generated by `cbindgen`_ when building the
code. All functions marked ``#[no_mangle] pub extern fn`` in the rust code will
automatically be translated to the corresponding C function declaration.

The C++ API in ``metatensor.hpp`` is manually written as a header-only library,
exposing the functions from ``metatensor.h`` with a cleaner C++11 interface.

``metatensor`` rust crate
^^^^^^^^^^^^^^^^^^^^^^^^^

This is built by cargo, like a normal Rust project, and re-export a native Rust
interface built on top of the C API. This is a separate module from
``metatensor-core`` so that in complex projects with multiple users of metatensor
there can be a single authoritative version of the metatensor C API.

When publishing to `crates.io`_, metatensor-core is included as a tarball of the
``metatensor-core/`` folder (using the ``.crate`` file created by cargo package).
This file should be generated before publishing using
``./metatensor/scripts/update-core.sh``. This script also update the Rust
declarations corresponding to the C API (``./metatensor/src/c_api.rs``) using
`bindgen`_.

``metatensor`` Python package
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This is built by setuptools/pip, like a normal Python project, and re-export a
native Python interface built on top of the C API. The C API is accessed using
the standard Python `ctypes`_ module. The functions declaration live in
``python/src/metatensor/_c_api.py``, and are generated from the functions in
``metatensor.h`` by the script ``./python/scripts/generate-declarations.py``.

In addition to the core types of metatensor, the Python package also contains a
set of :ref:`operations <python-api-operations>` acting on :py:class:`TensorMap`
and providing building blocks for machine learning models on top of the core
metatensor data structures.


.. _cmake: https://cmake.org/
.. _cbindgen: https://github.com/eqrion/cbindgen/blob/master/docs.md
.. _crates.io: https://crates.io/
.. _bindgen: https://rust-lang.github.io/rust-bindgen/
.. _ctypes: https://docs.python.org/3/library/ctypes.html
